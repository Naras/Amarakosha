from source.Controller import blast

global lingas, antas, vibstr, vachstr, Tganas, Tkarmas, Tpadis, Tyit, purstr, mesg, Voices
lingas = ["×èÂèÏÜÑÛ·èµ£", "ÈÝÑèÑÛ·èµ£", "ÆÈÝ¢×³ÑÛ·èµ£", "×èÂèÏÜ.ÈÝ¢", "×èÂèÏÜ.ÆÈÝ¢", "ÈÝ¢.ÆÈÝ¢", "×èÂèÏÜ.ÈÝ¢.ÆÈÝ¢",
          "¤ÑÛ·èµ"]

antas = ["a,¤",
         "b,¥",
         "c,¦",
         "d,§",
         "e,¨",
         "f,©",
         "g,ª",
         "h,ªé",
         "i,·",
         "j,¦é",
         "k,¬",
         "l,­",
         "m,°",
         "n,±",
         "p,¸",
         "q,º",
         "r,Á",
         "s,Â",
         "t,Ã",
         "u,Ä",
         "v,Å",
         "w,Æ",
         "x,È",
         "y,Ë",
         "z,Ì",
         "A,ÏáÉ",
         "B,Ô",
         "C,Õ",
         "D,Ö",
         "E,×",
         "F,Ø"]

vibstr = ["ÈèÏÃÌÚ",
          "ÄèÔÛÂÜÍÚ",
          "ÂßÂÜÍÚ",
          "¸ÂÝÏèÃÜ",
          "È¢¸ÌÜ",
          "ÖÖè¾Ü",
          "×ÈèÂÌÜ",
          "×¢ ÈèÏÃÌÚ"]

vachstr = ["¬³Ô¸Æ",
           "ÄèÔÛÔ¸Æ",
           "ÊØÝÔ¸Æ"]

Tganas = ["ËèÔÚÄÛµÁ£",
          "¤ÄÚÄÛµÁ£",
          "ºÝØåÂèÍÚÄÛµÁ£",
          "ÄÛÔÚÄÛµÁ£",
          "×èÔÚÄÛµÁ£",
          "ÂÝÄÚÄÛµÁ£",
          "ÏÝÅÚÄÛµÁ£",
          "ÂÆÚÄÛµÁ£",
          "³èÏÍÚÄÛµÁ£",
          "¸ÝÏÚÄÛµÁ£"]

Tkarmas = ["×³ÏèÌ³£",
           "¤³ÏèÌ³£",
           "ÄèÔÛ³ÏèÌ³£"]

Tpadis = ["ÈÏ×èÌâÈÄÜ"
          "¥ÂèÌÆáÈÄÜ",
          "¨ËÍÈÄÜ"]

Tyit = ["×á½è",
        "¤ÆÛ½è",
        "Ôá½è"]

purstr = ["ÈèÏÃÌÈÝÏÝÖ£",
          "ÌÅèÍÌÈÝÏÝÖ£",
          "¨ÂèÂÌÈÝÏÝÖ£"]

mesg = ["The sentence is syntactically compatible"
        "The sentence is syntactically not compatible",
        "ÒeLeceefJeYeef„",
        "le=leer³eefJeYeef„",
        "lJec/®e/Jee/³egJeec/³et³ec/Denc/DeeJeec/Je³eced",
        "³egJeec",
        "³et³ec",
        "Denc",
        "DeeJeec",
        "Je³eced",
        "Deefmce/YeJeeefce",
        "mJeë/YeJeeJeë",
        "mceë/YeJeeceë",
        "Deefme/YeJeefme",
        "mLeë/YeJeLeë",
        "mLe/YeJeLe",
        "Deefmle/YeJeefle",
        "mleë/YeJeleë",
        "meefvle/YeJeefvle",
        "Any subanta other than ³eg<ceod and Demceod Meyo",
        "Yet³eles",
        "Noun(s)",
        "Pronoun(s)",
        "Adjective(s)",
        "Krdanta(s)",
        "KrdAvyaya(s)",
        "Avyaya(s)",
        "Verb(s)",
        "Verb",
        "Subject(s)",
        "Object(s)",
        "Instrument(s)",
        "Dative(s)",
        "Ablative(s)",
        "Genitive(s)",
        "Locative(s)",
        "Vocative(s)"]

Voices = ["³ÏèÂÏÛ",
          "³ÏèÌÁÛ"]

Suffix = ["¤"
    , "¤£"
    , "¤£×Ý"
    , "¤³è"
    , "¤³èÖÝ"
    , "¤µèËÛ£"
    , "¤µèËèÍ£"
    , "¤µèËèÍÚÌè"
    , "¤·è"
    , "¤·è³èÖÝ"
    , "¤·èËÛ£"
    , "¤·èËèÍ£"
    , "¤·èËèÍÚÌè"
    , "¤·èÖÝ"
    , "¤¼è¸£"
    , "¤¼è¸Ìè"
    , "¤¼è¸Ú"
    , "¤¼è¸ÚÌè"
    , "¤¼è¸Û"
    , "¤¼è¸á"
    , "¤¼è¸å£"
    , "¤¼è¸æ"
    , "¤Á£"
    , "¤ÁÌè"
    , "¤ÁÚ"
    , "¤ÁÚÌè"
    , "¤ÁÛ"
    , "¤ÁÜ"
    , "¤Áá"
    , "¤Áå£"
    , "¤Áæ"
    , "¤Â£"
    , "¤ÂÚ"
    , "¤ÂÚÌè"
    , "¤ÂÛ"
    , "¤Âá"
    , "¤Âå£"
    , "¤Âè"
    , "¤Âè×Ý"
    , "¤Ä£"
    , "¤ÄÚ"
    , "¤ÄÚÌè"
    , "¤ÄÛ"
    , "¤Äá"
    , "¤Äå£"
    , "¤ÄèËÛ£"
    , "¤ÄèËèÍ£"
    , "¤ÄèËèÍÚÌè"
    , "¤Æ£"
    , "¤ÆÚ"
    , "¤ÆÚÌè"
    , "¤ÆÛ"
    , "¤ÆÜ"
    , "¤Æá"
    , "¤Æå£"
    , "¤Æè"
    , "¤ÆèÂ£"
    , "¤ÆèÂÌè"
    , "¤ÆèÂæ"
    , "¤ËÛ£"
    , "¤ËèÍ£"
    , "¤ËèÍÚÌè"
    , "¤Ìè"
    , "¤Í£"
    , "¤ÍÌè"
    , "¤ÍÚ"
    , "¤ÍÚÌè"
    , "¤ÍÛ"
    , "¤Íá"
    , "¤Íå£"
    , "¤Íæ"
    , "¤Ï£"
    , "¤ÏÌè"
    , "¤ÏÛ"
    , "¤Ïæ"
    , "¤Ñ£"
    , "¤ÑÌè"
    , "¤ÑÛ"
    , "¤Ñæ"
    , "¤Ñè"
    , "¤Ô£"
    , "¤ÔÚ"
    , "¤ÔÚ½è"
    , "¤ÔÚ½è×Ý"
    , "¤ÔÚ¿è"
    , "¤ÔÚ¿èËÛ£"
    , "¤ÔÚ¿èËèÍ£"
    , "¤ÔÚ¿èËèÍÚÌè"
    , "¤ÔÚÌè"
    , "¤ÔÚØ£"
    , "¤ÔÚØÌè"
    , "¤ÔÚØæ"
    , "¤ÔÛ"
    , "¤Ôá"
    , "¤Ôå£"
    , "¤×£"
    , "¤×Ìè"
    , "¤×Ú"
    , "¤×ÚÌè"
    , "¤×Û"
    , "¤×Ü"
    , "¤×Ý"
    , "¤×á"
    , "¤×å£"
    , "¤×æ"
    , "¤×èÌÚÂè"
    , "¤×èÌÛÆè"
    , "¤×èÌâ"
    , "¤×èÍ"
    , "¤×èÍÚ£"
    , "¤×èÍÚÌè"
    , "¤×èÍâ"
    , "¤×è×Ý"
    , "¥"
    , "¥¢×£"
    , "¥¢×Ìè"
    , "¥¢×Û"
    , "¥¢×æ"
    , "¥£"
    , "¥£ÖÝ"
    , "¥Á£"
    , "¥ÁÌè"
    , "¥ÁÚÌè"
    , "¥ÁÛ"
    , "¥Áæ"
    , "¥Âè"
    , "¥Âè×Ý"
    , "¥Ä£"
    , "¥ÄÌè"
    , "¥Äæ"
    , "¥Äè"
    , "¥ÄèËÛ£"
    , "¥ÄèËèÍ£"
    , "¥ÄèËèÍÚÌè"
    , "¥Æ£"
    , "¥ÆÌè"
    , "¥ÆÚÌè"
    , "¥ÆÛ"
    , "¥Ææ"
    , "¥Æè"
    , "¥ËÛ£"
    , "¥ËèÍ£"
    , "¥ËèÍÚÌè"
    , "¥Ìè"
    , "¥Í"
    , "¥Í£"
    , "¥ÍÌè"
    , "¥ÍÚ£"
    , "¥ÍÚÌè"
    , "¥Íâ"
    , "¥Íæ"
    , "¥Ï£"
    , "¥ÏÌè"
    , "¥ÏÚ"
    , "¥ÏÚÌè"
    , "¥ÏÛ"
    , "¥Ïá"
    , "¥Ïå£"
    , "¥Ïæ"
    , "¥ÏèËÛ£"
    , "¥ÏèËèÍ£"
    , "¥ÏèËèÍÚÌè"
    , "¥ÏèÖÝ"
    , "¥Ô£"
    , "¥ÔÌè"
    , "¥ÔÚ"
    , "¥ÔÚÌè"
    , "¥ÔÛ"
    , "¥Ôá"
    , "¥Ôå£"
    , "¥Ôæ"
    , "¥×ÚÌè"
    , "¥×Ý"
    , "¦"
    , "¦£"
    , "¦¸£"
    , "¦¸Ú"
    , "¦¸ÚÌè"
    , "¦¸Û"
    , "¦¸Ü"
    , "¦¸á"
    , "¦¸å£"
    , "¦Á£"
    , "¦ÁÌè"
    , "¦ÁÚ"
    , "¦ÁÚÌè"
    , "¦ÁÛ"
    , "¦ÁÜ"
    , "¦Áá"
    , "¦Áå£"
    , "¦Áæ"
    , "¦Æ£"
    , "¦ÆÌè"
    , "¦ÆÚ"
    , "¦ÆÚÌè"
    , "¦ÆÛ"
    , "¦ÆÜ"
    , "¦Æá"
    , "¦Æå£"
    , "¦Ææ"
    , "¦Æè"
    , "¦ËÛ£"
    , "¦ËèÍ£"
    , "¦ËèÍÚÌè"
    , "¦Ìè"
    , "¦Í£"
    , "¦ÍÌè"
    , "¦ÍÚ"
    , "¦ÍÚ£"
    , "¦ÍÚÌè"
    , "¦ÍÛ"
    , "¦Íá"
    , "¦Íâ"
    , "¦Íå£"
    , "¦Íæ"
    , "¦Ï£"
    , "¦ÏÌè"
    , "¦ÏÚ"
    , "¦ÏÚÌè"
    , "¦ÏÛ"
    , "¦Ïá"
    , "¦Ïå£"
    , "¦Ïæ"
    , "¦ÏèËÛ£"
    , "¦ÏèËèÍ£"
    , "¦ÏèËèÍÚÌè"
    , "¦Ô£"
    , "¦ÔÂè×Ý"
    , "¦ÔÄèËÛ£"
    , "¦ÔÄèËèÍ£"
    , "¦ÔÄèËèÍÚÌè"
    , "¦ÔÆè"
    , "¦ÔÌè"
    , "¦ÔÚ"
    , "¦ÔÚ¢×£"
    , "¦ÔÚ¢×Ìè"
    , "¦ÔÚ¢×æ"
    , "¦ÔÚÆè"
    , "¦ÔÚÌè"
    , "¦ÔÛ"
    , "¦Ôá"
    , "¦Ôå£"
    , "¦Ôæ"
    , "¦Ö£"
    , "¦ÖÌè"
    , "¦ÖÚ"
    , "¦ÖÚÌè"
    , "¦ÖÛ"
    , "¦ÖÜ"
    , "¦ÖÝ"
    , "¦Öá"
    , "¦Öå£"
    , "¦Öæ"
    , "¦ÖèÖÝ"
    , "¦éËÛ£"
    , "¦éËèÍ£"
    , "¦éËèÍÚÌè"
    , "¦éÖÝ"
    , "§"
    , "§¢ÖÛ"
    , "§£"
    , "§¸£"
    , "§¸Ú"
    , "§¸ÚÌè"
    , "§¸Û"
    , "§¸á"
    , "§¸å£"
    , "§ÁÚÌè"
    , "§ÁÛ"
    , "§ÆÚÌè"
    , "§ÆÛ"
    , "§Æè"
    , "§ËÛ£"
    , "§ËèÍ£"
    , "§ËèÍÚÌè"
    , "§Ìè"
    , "§Í£"
    , "§ÏèËÛ£"
    , "§ÏèËèÍ£"
    , "§ÏèËèÍÚÌè"
    , "§ÏèÖÝ"
    , "§ÖÝ"
    , "¨"
    , "¨£"
    , "¨Á£"
    , "¨ÁÚ"
    , "¨ÁÛ"
    , "¨ÁÜ"
    , "¨Áá"
    , "¨Áå£"
    , "¨Æ£"
    , "¨ÆÚ"
    , "¨ÆÛ"
    , "¨ÆÜ"
    , "¨Æá"
    , "¨Æå£"
    , "¨ËÛ£"
    , "¨ËèÍ£"
    , "¨ËèÍÚÌè"
    , "¨Ìè"
    , "¨Ï£"
    , "¨ÏÌè"
    , "¨ÏÚ"
    , "¨ÏÚÌè"
    , "¨ÏÛ"
    , "¨Ïá"
    , "¨Ïå£"
    , "¨Ïæ"
    , "¨ÏèËÛ£"
    , "¨ÏèËèÍ£"
    , "¨ÏèËèÍÚÌè"
    , "¨Ñè"
    , "¨Ô£"
    , "¨ÔÌè"
    , "¨ÔÚ"
    , "¨ÔÚ£"
    , "¨ÔÚÌè"
    , "¨ÔÛ"
    , "¨Ôá"
    , "¨Ôâ"
    , "¨Ôå£"
    , "¨Ôæ"
    , "¨Ö£"
    , "¨ÖÌè"
    , "¨ÖÚ"
    , "¨ÖÚÌè"
    , "¨ÖÛ"
    , "¨ÖÜ"
    , "¨ÖÝ"
    , "¨Öá"
    , "¨Öå£"
    , "¨Öæ"
    , "¨ÖèÖÝ"
    , "©"
    , "©¢ÖÛ"
    , "©£"
    , "©ÁÚÌè"
    , "©ÁÛ"
    , "©ÆÚÌè"
    , "©ÆÛ"
    , "©Æè"
    , "©ËÛ£"
    , "©ËèÍ£"
    , "©ËèÍÚÌè"
    , "©Ìè"
    , "©ÏèËÛ£"
    , "©ÏèËèÍ£"
    , "©ÏèËèÍÚÌè"
    , "©ÏèÖÝ"
    , "©ÖÝ"
    , "ª"
    , "ªÁ£"
    , "ªÁÚ"
    , "ªÁÛ"
    , "ªÁÜ"
    , "ªÁá"
    , "ªÁå£"
    , "ªÂ£"
    , "ªÂÚ"
    , "ªÂÚÌè"
    , "ªÂÛ"
    , "ªÂÜ"
    , "ªÂá"
    , "ªÂå£"
    , "ªÂè"
    , "ªÂè×Ý"
    , "ªÄè"
    , "ªÄèËÛ£"
    , "ªÄèËèÍ£"
    , "ªÄèËèÍÚÌè"
    , "ªÆèÂÛ"
    , "ªËÛ£"
    , "ªËèÍ£"
    , "ªËèÍÚÌè"
    , "ªÖÝ"
    , "ªé£"
    , "ªéÁÚÌè"
    , "ªéÁÛ"
    , "ªéÆè"
    , "ªéËÛ£"
    , "ªéËèÍ£"
    , "ªéËèÍÚÌè"
    , "ªéÌè"
    , "ªéÖÝ"
    , "¬"
    , "¬£"
    , "¬Á"
    , "¬Æ"
    , "¬ËÛ£"
    , "¬ËèÍ£"
    , "¬ËèÍÚÌè"
    , "¬ÖÚÌè"
    , "¬ÖÝ"
    , "­£"
    , "°"
    , "°£"
    , "°ËÛ£"
    , "°ËèÍ£"
    , "°ËèÍÚÌè"
    , "°ÖÝ"
    , "±"
    , "±£"
    , "±ËÛ£"
    , "±ËèÍ£"
    , "±ËèÍÚÌè"
    , "±ÖÝ"
    , "±Ø£"
    , "±ØÚ"
    , "±ØÚÌè"
    , "±ØÛ"
    , "±Øá"
    , "±Øå£"
    , "³è"
    , "³èÖ£"
    , "³èÖÌè"
    , "³èÖÚ"
    , "³èÖÚÌè"
    , "³èÖÛ"
    , "³èÖÝ"
    , "³èÖá"
    , "³èÖå£"
    , "³èÖæ"
    , "µè"
    , "µèËÛ£"
    , "µèËèÍ£"
    , "µèËèÍÚÌè"
    , "¸£"
    , "¸Ìè"
    , "¸Ú"
    , "¸ÚÌè"
    , "¸Û"
    , "¸á"
    , "¸å£"
    , "¸æ"
    , "º£"
    , "ºÌè"
    , "ºÚ"
    , "ºÚÌè"
    , "ºÛ"
    , "ºá"
    , "ºå£"
    , "ºæ"
    , "½è"
    , "½èÂè×Ý"
    , "½è×Ý"
    , "¿è"
    , "¿èËÛ£"
    , "¿èËèÍ£"
    , "¿èËèÍÚÌè"
    , "Á£"
    , "ÁÌè"
    , "ÁÚ"
    , "ÁÚÌè"
    , "ÁÛ"
    , "Áá"
    , "Áå£"
    , "Áæ"
    , "Áè"
    , "ÁèÁÚÌè"
    , "ÁèÁè×Ý"
    , "ÁèÂè×Ý"
    , "ÁèËÛ£"
    , "ÁèËèÍ£"
    , "ÁèËèÍÚÌè"
    , "Â£"
    , "ÂÌè"
    , "ÂÔ"
    , "ÂÚ"
    , "ÂÚÌè"
    , "ÂÛ"
    , "ÂÜ"
    , "ÂÝËèÍÌè"
    , "Âá"
    , "Âå£"
    , "Âæ"
    , "Âè"
    , "ÂèÏÍ£"
    , "ÂèÏÍÚÁÚÌè"
    , "ÂèÏÛËèÍ£"
    , "ÂèÏÛÖÝ"
    , "ÂèÏÜÆè"
    , "ÂèÔÂè"
    , "ÂèÔÌè"
    , "ÂèÔÍÚ"
    , "ÂèÔÍÛ"
    , "ÂèÔÚ"
    , "ÂèÔÚÌè"
    , "Âè×Ý"
    , "Ã£"
    , "ÃÚ"
    , "ÃÚÌè"
    , "ÃÛ"
    , "ÃÛËÛ£"
    , "ÃÛËèÍ£"
    , "ÃÛËèÍÚÌè"
    , "ÃÛÖÝ"
    , "Ãá"
    , "Ãå£"
    , "Ä£"
    , "ÄÌè"
    , "ÄÚ"
    , "ÄÚÌè"
    , "ÄÛ"
    , "ÄÛÔ£"
    , "ÄÛÔÚ"
    , "ÄÛÔÚÌè"
    , "ÄÛÔÛ"
    , "ÄÛÔÜ"
    , "ÄÛÔá"
    , "ÄÛÔå£"
    , "ÄÜ"
    , "Äá"
    , "Äå£"
    , "Äæ"
    , "Äè"
    , "ÄèËÍ£"
    , "ÄèËÛ£"
    , "ÄèËèÍ£"
    , "ÄèËèÍÚÌè"
    , "ÄèÍÝ"
    , "ÄèÍÝËÛ£"
    , "ÄèÍÝËèÍ£"
    , "ÄèÍÝËèÍÚÌè"
    , "ÄèÍÝÖÝ"
    , "Å£"
    , "ÅÌè"
    , "ÅÚ"
    , "ÅÚÌè"
    , "ÅÛ"
    , "Åá"
    , "Åå£"
    , "Åæ"
    , "Æ"
    , "Æ£"
    , "ÆÌè"
    , "ÆÍå£"
    , "Æ×èÍ"
    , "ÆÚ"
    , "ÆÚ£"
    , "ÆÚÂè"
    , "ÆÚÆÚÌè"
    , "ÆÚÆè"
    , "ÆÚËèÍÚÌè"
    , "ÆÚÌè"
    , "ÆÚÍ"
    , "ÆÛ"
    , "ÆÜ"
    , "Æá"
    , "ÆáÆ"
    , "ÆáËèÍ£"
    , "ÆáÖÝ"
    , "Æâ£"
    , "Æå£"
    , "Ææ"
    , "Æè"
    , "ÆèÂ£"
    , "ÆèÂÌè"
    , "ÆèÂÛ"
    , "ÆèÂÜ"
    , "ÆèÂæ"
    , "ÆèÃÚ£"
    , "ÆèÃÚÆ£"
    , "ÆèÃÚÆÌè"
    , "ÆèÃÚÆæ"
    , "ÆèËÛ£"
    , "ÆèËèÍ£"
    , "ÆèËèÍÚÌè"
    , "Æè×Ý"
    , "Èè"
    , "Èè×Ý"
    , "ÊèËÛ£"
    , "ÊèËèÍ£"
    , "ÊèËèÍÚÌè"
    , "Ë£"
    , "ËÌè"
    , "ËÚ"
    , "ËÚÌè"
    , "ËÛ"
    , "ËÛ£"
    , "Ëá"
    , "Ëå£"
    , "Ëæ"
    , "ËèÍ£"
    , "ËèÍÚÌè"
    , "ÌèÕÛ"
    , "ÌèÖÛ"
    , "Ìè×£"
    , "Ìè×Ìè"
    , "Ìè×Ú"
    , "Ìè×ÚÌè"
    , "Ìè×Û"
    , "Ìè×Ü"
    , "Ìè×á"
    , "Ìè×å£"
    , "Ìè×æ"
    , "Í£"
    , "Í³èÖÝ"
    , "ÍµèËÛ£"
    , "ÍµèËèÍ£"
    , "ÍµèËèÍÚÌè"
    , "Í·è"
    , "Í¼è¸£"
    , "Í¼è¸Ìè"
    , "Í¼è¸æ"
    , "ÍÌè"
    , "ÍÚ"
    , "ÍÚ£"
    , "ÍÚÌè"
    , "ÍÛ"
    , "ÍÝ£"
    , "ÍÝËÛ£"
    , "ÍÝËèÍ£"
    , "ÍÝËèÍÚÌè"
    , "ÍÝÔÍå£"
    , "ÍÝÔÚËèÍÚÌè"
    , "ÍÝÔÚÌè"
    , "ÍÝÖÝ"
    , "ÍÝÖèÌÂè"
    , "ÍÝÖèÌËèÍÌè"
    , "ÍÝÖèÌÚ³Ìè"
    , "ÍÝÖèÌÚÆè"
    , "ÍÝÖèÌÚËÛ£"
    , "ÍÝÖèÌÚ×Ý"
    , "ÍÞÍÌè"
    , "Íá"
    , "Íâ"
    , "Íå£"
    , "Íæ"
    , "Íæ£"
    , "Ï£"
    , "ÏÚ"
    , "ÏÚÌè"
    , "ÏÛ"
    , "Ïá"
    , "Ïå£"
    , "Ïæ"
    , "ÑÚ"
    , "Ñá"
    , "Ñå£"
    , "Ô£"
    , "ÔÂè×Ý"
    , "ÔÄèËÛ£"
    , "ÔÄèËèÍ£"
    , "ÔÄèËèÍÚÌè"
    , "ÔÆè"
    , "ÔÌè"
    , "ÔÚ"
    , "ÔÚ¢×£"
    , "ÔÚ¢×Ìè"
    , "ÔÚ¢×æ"
    , "ÔÚ£"
    , "ÔÚÆè"
    , "ÔÚÌè"
    , "ÔÛ"
    , "Ôá"
    , "Ôâ"
    , "Ôå£"
    , "Ôæ"
    , "Õ£"
    , "ÕÌè"
    , "ÕÚ"
    , "ÕÚÌè"
    , "ÕÛ"
    , "ÕÜ"
    , "Õá"
    , "Õå£"
    , "Õæ"
    , "Ö£"
    , "ÖÌè"
    , "ÖÚ"
    , "ÖÚÌè"
    , "ÖÛ"
    , "ÖÜ"
    , "Öá"
    , "Öå£"
    , "Öæ"
    , "×£"
    , "×Ìè"
    , "×Ú"
    , "×ÚÌè"
    , "×Û"
    , "×Ü"
    , "×Ý"
    , "×á"
    , "×å£"
    , "×æ"
    , "Ø£"
    , "ØÌè"
    , "ØÚ"
    , "ØÚÌè"
    , "ØÛ"
    , "Øá"
    , "Øå£"]

def Convt(sufcode):   # copied from old VB code and changed to get the suffix, rather than index to the suffix in
    No = []
    for ch in sufcode:
        nr = ord(ch)
        if nr in range(48,58):
            No.append(nr - 48)
        elif nr in range(96,123):
            No.append(nr - 87)
    res = 36 * No[0] + No[1]
    # print('sufcode % sConvt %i'%(sufcode, res))
    return Suffix[res]
def Sandhi(inword):
    # print('iscii %s devanagari %s'%(inword, Amarakosha_Database_Queries.iscii_unicode(inword)))
    halanth = chr(232)
    # inword = inword.split()
    outword = ''
    if inword == '': return ''
    i = 0
    while i < len(inword):
        ch = inword[i]
        if ch != halanth:
            outword += ch
            if (i < len(inword) - 1) and ch != '/':
                ch = inword[i + 1]
                if ord(ch) in range(164, 178):
                    i += 1
                    ch1 = inword[i]
                    if i > 1:
                        if inword[i-2] != " ":
                            if ord(ch1) == 164: pass
                            elif ord(ch1) in range(165, 178):
                                outword += 218 - 165 + ord(ch1)
                            else: outword += ch + ch1
                        else: outword += ch1
                    else: outword += ch1
        else:  # halanth
          i += 1
          if i <= len(inword) - 1:
              ch1 = inword[i]
              if ord(ch1) == 164: pass
              elif ord(ch1) in range(165, 178):
                  outword += chr(218 - 165 + ord(ch1))
              else: outword += ch + ch1
          else: outword += ch
        i += 1
    # print('%s after %s %s %s'%(inword, outword, cli_browse.iscii_unicode(inword), cli_browse.iscii_unicode(outword)))
    return outword
def doSandhi1(tigantaForm, upasarga):
    aDict1 = {"¤":"¥", "¥":"¥", "¦":"¬", "§":"¬", "¨":"°", "©":"°", "ª":"¥Ïè", "¬":"­", "­":"­", "°":"±", "±":"±"}
    bDict = {"¤": aDict1, "¥": aDict1,
             "¦":{"¦":"§", "§":"§",
                  "¤":"Íè", "¥":"Íè", "¨":"Íè", "©":"Íè", "ª":"Íè", "¬":"Íè", "­":"Íè", "°":"Íè", "±":"Íè"},
             "¨":{"¨":"©", "©":"©", "¤":"Ôè", "¥":"Ôè", "¦":"Ôè", "§":"Ôè", "ª":"Ôè", "¬":"Ôè", "­":"Ôè", "°":"Ôè", "±":"Ôè"}    }
    c = bDict.get(upasarga[0], '')
    if c != '': c = c.get(tigantaForm[0], '')
    flag = 1 if upasarga[0] in bDict else 0
    if upasarga[0] == "¦" and tigantaForm[0] in ["¤", "¥", "¨", "©", "ª", "¬", "­", "°", "±"]: flag = 2
    if upasarga[0] == "¨" and tigantaForm[0] in ["¤", "¥", "¦", "§", "ª", "¬", "­", "°", "±"]: flag = 1
    if flag > 0:
        sandhiForm = upasarga[:-1] + c
        if flag == 2: sandhiForm += tigantaForm
        else: sandhiForm += tigantaForm[1:]
    else: sandhiForm = upasarga + tigantaForm
    return sandhiForm
def doSandhi2(tigantaForm, upasarga):
    sandhiForm = upasarga
    upasargaDict = {"×Ìè":{"³":"·", "´":"·", "µ":"·", "¶":"·", "·":"·"},
                    "ÆÛÏè":{"³":"Ö", "´":"Ö", "½":"Ö", "¾":"Ö", "È":"Ö", "É":"Ö", "Ö":"Ö",
                            "¸":"Õ", "¹":"Õ", "Õ":"Õ",
                            "Â":"×", "Ã":"×", "×":"×"},
                    "ÄÝÏè":{"³":"Ö", "´":"Ö", "½":"Ö", "¾":"Ö", "È":"Ö", "É":"Ö", "Ö":"Ö",
                            "¸":"Õ", "¹":"Õ", "Õ":"Õ",
                            "Â":"×", "Ã":"×", "×":"×"},
                    "¨Âè":{"¤":"Ä", "¥":"Ä", "¦":"Ä", "§":"Ä", "¨":"Ä", "©":"Ä", "ª":"Ä", "¬":"Ä", "­":"Ä", "°":"Ä", "±":"Ä",
                           "µ":"Ä", "¶":"Ä", "Ä":"Ä", "Å":"Ä", "Ê":"Ä", "Ë":"Ä", "Í":"Ä", "Ï":"Ä", "Ô":"Ä",
                           "¸":"¸", "¹":"¸",
                           "º":"º", "»":"º",
                           "¾":"½",
                           "Æ":"Æ", "Ì":"Æ",
                           "Ñ":"Ñ",
                           "Õ":"¸",
                           "Ø":"Ä"}
                   }
    sandhiForm[0] = upasargaDict[tigantaForm[0]][upasarga[0]]
    if  tigantaForm == "Ï": sandhiForm = {"ÆÛÏè":"ÆÜ", "ÄÝÏè":"ÄÞ"}[upasarga]
    flag = 2 if upasarga == "¨Âè" and tigantaForm[0] == "Ø" else 0
    if flag == 1: sandhiForm += "¹"
    elif flag == 2: sandhiForm += tigantaForm[:-1]
    else: sandhiForm += tigantaForm
def doSandhiofUpasargaAndTigantaForm(tigantaForm, upasarga):
    if upasarga in ["×Ìè", "ÆÛÏè", "ÄÝÏè", "¨Âè"]: sandhiForm = doSandhi2(tigantaForm, upasarga)
    else: sandhiForm = doSandhi1(blast.performBlast(tigantaForm), blast.performBlast(upasarga) )
    return blast.phoneticallyJoin(sandhiForm)
def visandhi(inword):
    # print('iscii %s devanagari %s'%(inword, cli_browse.iscii_unicode(inword)))
    halanth = chr(232)
    # inword = inword.split()
    outword = ''
    i = 0
    while i < len(inword):
        ch = inword[i]
        if ord(ch) in range(164,178): outword+= ch
        elif ord(ch) in range(179,217):
            if (i < len(inword) - 1):
                ch1 = inword[i + 1]
                outword += ch + halanth
                if ord(ch1) == halanth: i += 1
                else:
                    if ord(ch1) in range(218,231):
                        i += 1
                        outword += chr(ord(ch1) - (218 - 165))
                    else: outword += chr(164)
            else: i += 1
        else: outword+= ch
        i += 1
    return outword
def decode(code):
    if code in range(10): return '0' + str(code)
    elif code in range(11,36): return '0' + chr(code + 87)
    else:
        code, rem = code // 36, code % 36
        if code in range(10): res = str(code)
        elif code in range(11, 36): res = chr(code + 87)
        if rem in range(10): res += str(rem)
        elif rem in range(10, 36): res += chr(rem + 87)
        return res

if __name__ == '__main__':
     print(Suffix[0:5], Suffix[234:245])